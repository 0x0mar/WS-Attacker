/**
 * WS-Attacker - A Modular Web Services Penetration Testing Framework
 * Copyright (C) 2010 Christian Mainka
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package wsattacker.gui.component.attackoverview;

import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import wsattacker.gui.GuiController;
import wsattacker.main.composition.ControllerInterface;
import wsattacker.main.plugin.PluginManager;
import wsattacker.main.plugin.result.ResultLevel;

/**
 *
 * @author christian
 */
public class AttackOverviewNB extends javax.swing.JPanel {

    ControllerInterface controller;

    /**
     * Creates new form AttackOverviewNB
     */
    public AttackOverviewNB() {
        this(GuiController.getInstance());
    }

    public AttackOverviewNB(ControllerInterface controller) {
        this.controller = controller;
        initComponents();
        addSelectionModelToEnabledPluginsTable();
        addAdjustmenListenerToResultsScrollbar();
    }

    private void addSelectionModelToEnabledPluginsTable() {
        enabledPluginTable.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    @Override
                    public void valueChanged(ListSelectionEvent e) {
                        if (!e.getValueIsAdjusting()) {
                            int[] selected = enabledPluginTable
                                    .getSelectedRows();
                            List<String> sources = new ArrayList<String>();
                            for (int index : selected) {
                                sources.add(PluginManager.getInstance()
                                        .getActive(index)
                                        .getName());
                            }
                            resultTable.filterSources(sources);
                        }
                    }
                });
    }

    private void addAdjustmenListenerToResultsScrollbar() {
        resultTableScrollPane.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                e.getAdjustable().setValue(e.getAdjustable().getMaximum());
            }
        });
    }

    public void enableStartButton(boolean enable) {
        start.setEnabled(enable);
    }
    public void enableStopButton(boolean enable) {
        stop.setEnabled(enable);
    }
    public void enableCleanButton(boolean enable) {
        clean.setEnabled(enable);
    }
    public void enableSaveButton(boolean enable) {
        save.setEnabled(enable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        saveResultsFileChooser = new javax.swing.JFileChooser();
        start = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        clean = new javax.swing.JButton();
        save = new javax.swing.JButton();
        splitviewPane = new javax.swing.JSplitPane();
        enabledPluginTableScrollPane = new javax.swing.JScrollPane();
        enabledPluginTable = new wsattacker.gui.component.attackoverview.subcomponent.EnabledPluginTable();
        resultTableScrollPane = new javax.swing.JScrollPane();
        resultTable = new wsattacker.gui.component.attackoverview.subcomponent.ResultTable();
        resultLevelSlider = new wsattacker.gui.component.attackoverview.subcomponent.ResultLevelSlider();

        saveResultsFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveResultsFileChooser.setDialogTitle("Save Results to...");
        saveResultsFileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File file) {
                // Allow only directories, or files with ".txt" extension
                return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
            }

            @Override
            public String getDescription() {
                // This description will be displayed in the dialog,
                // hard-coded = ugly, should be done via I18N
                return "Text documents (*.txt)";
            }
        });

        setName("Attack Overview"); // NOI18N

        start.setText("Start");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stop, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), start, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAction(evt);
            }
        });

        stop.setText("Stop");
        stop.setEnabled(false);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAction(evt);
            }
        });

        clean.setText("Clean");
        clean.setEnabled(false);
        clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanAction(evt);
            }
        });

        save.setText("Save");
        save.setEnabled(false);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAction(evt);
            }
        });

        splitviewPane.setDividerLocation((2+PluginManager.getInstance()
            .countPlugins())*enabledPluginTable.getRowHeight());
    splitviewPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    enabledPluginTableScrollPane.setViewportView(enabledPluginTable);

    splitviewPane.setLeftComponent(enabledPluginTableScrollPane);

    resultTableScrollPane.setViewportView(resultTable);

    splitviewPane.setRightComponent(resultTableScrollPane);

    resultLevelSlider.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            resultLevelSliderStateChanged(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(splitviewPane)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(start)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(stop)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(clean)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(save)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                    .addComponent(resultLevelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start)
                    .addComponent(stop)
                    .addComponent(clean)
                    .addComponent(save))
                .addComponent(resultLevelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(splitviewPane, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
            .addContainerGap())
    );

    bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void startAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAction
        controller.startActivePlugins();
    }//GEN-LAST:event_startAction

    private void stopAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAction
        controller.stopActivePlugins();
    }//GEN-LAST:event_stopAction

    private void cleanAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanAction
        controller.cleanPlugins();
    }//GEN-LAST:event_cleanAction

    private void saveAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAction
        int returnVal = saveResultsFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = saveResultsFileChooser.getSelectedFile();
            BufferedWriter out = null;
            try {
                out = new BufferedWriter(new FileWriter(file));
                for (int row = 0; row < resultTable.getRowCount(); ++row) {
                    for (int col = 0; col < resultTable.getColumnCount(); ++col) {
                        out.write(resultTable.getValueAt(row, col).toString());
                        out.newLine();
                    }
                    out.newLine();
                }
            }
            catch (IOException ex) {
                Logger.getLogger(AttackOverviewNB.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally {
                try {
                    out.close();
                }
                catch (IOException ex) {
                    Logger.getLogger(AttackOverviewNB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveAction

    private void resultLevelSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resultLevelSliderStateChanged
        int val = resultLevelSlider.getValue();
        String level = ( (JLabel) resultLevelSlider.getLabelTable()
                .get(val) ).getText();
        resultTable.setLevel(ResultLevel.valueOf(level));
    }//GEN-LAST:event_resultLevelSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clean;
    private wsattacker.gui.component.attackoverview.subcomponent.EnabledPluginTable enabledPluginTable;
    private javax.swing.JScrollPane enabledPluginTableScrollPane;
    private wsattacker.gui.component.attackoverview.subcomponent.ResultLevelSlider resultLevelSlider;
    private wsattacker.gui.component.attackoverview.subcomponent.ResultTable resultTable;
    private javax.swing.JScrollPane resultTableScrollPane;
    private javax.swing.JButton save;
    private javax.swing.JFileChooser saveResultsFileChooser;
    private javax.swing.JSplitPane splitviewPane;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
